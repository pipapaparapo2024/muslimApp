import { useState, useRef, useEffect } from "react";
import { useTonConnectUI, useTonAddress, CHAIN } from "@tonconnect/ui-react";
import { quranApi } from "../api/api";
import { usePremiumStore } from "../hooks/usePremiumStore";

export interface TonPayParams {
  amount: number;
  type: "premium" | "requests";
  duration?: string | number;
  quantity?: number;
  productId?: string;
}

export interface TonPaymentResponse {
  status: "success" | "rejected" | "not_connected" | "server_error" | "error";
  error?: any;
  data?: any;
}
export const useTonPay = () => {
  const userAddress = useTonAddress();
  const [tonConnectUI] = useTonConnectUI();
  const { fetchUserData } = usePremiumStore();
  const [isWaitingConfirmation, setIsWaitingConfirmation] = useState(false);
  const [isProcessing, setIsProcessing] = useState(false);
  const inProgressRef = useRef(false);

  const isTonConnectReady = useRef(false);

  useEffect(() => {
    const timer = setTimeout(() => {
      isTonConnectReady.current = true;
    }, 2000);

    return () => clearTimeout(timer);
  }, []);

  const waitForConfirmation = async (
    payload: string,
    maxAttempts = 20
  ): Promise<TonPaymentResponse> => {
    setIsWaitingConfirmation(true);

    for (let attempt = 1; attempt <= maxAttempts; attempt++) {
      try {
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (${attempt}/${maxAttempts})`);
        const response = await quranApi.get(
          `/api/v1/payments/ton/${payload}/check`
        );

        const status = response.data.data.orderStatus;

        if (status === "success") {
          console.log("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞");
          await fetchUserData();
          return { status: "success", data: response.data };
        }

        if (["failed", "rejected"].includes(status)) {
          console.warn("‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ —Å–µ—Ç—å—é");
          return { status: "error", error: "Transaction failed in blockchain" };
        }

        if (status === "pending") {
          if (attempt < maxAttempts) {
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
            await new Promise((r) => setTimeout(r, 4000));
            continue;
          } else {
            return { status: "error", error: "Confirmation timeout" };
          }
        }

        if (status === "timeout") {
          return { status: "error", error: "Confirmation timeout" };
        }
      } catch (error) {
        console.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ (${attempt}):`, error);
        if (attempt < maxAttempts) {
          await new Promise((r) => setTimeout(r, 4000));
        }
      }
    }

    return { status: "error", error: "Confirmation timeout" };
  };

  const getTonWallet = async (): Promise<string | TonPaymentResponse> => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å TON Connect
      if (!isTonConnectReady.current) {
        console.log("‚è≥ TON Connect –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤");
        await new Promise((resolve) => setTimeout(resolve, 1000));
      }

      if (!userAddress || !tonConnectUI.connected) {
        console.log(
          "üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω ‚Äî –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ TON Connect"
        );
        await tonConnectUI.openModal();

        // –ñ–¥–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        await new Promise((resolve) => setTimeout(resolve, 2000));

        if (!userAddress) {
          return { status: "not_connected", error: "User not connected" };
        }
      }

      const response = await quranApi.get("/api/v1/payments/ton/wallet");

      if (!response.data.data?.wallet) {
        throw new Error("Wallet not found in response");
      }

      return response.data.data.wallet;
    } catch (err: any) {
      console.error("TON wallet error:", err);

      // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
      if (err?.response?.status === 400) {
        return { status: "server_error", error: "Server configuration error" };
      }

      if (err?.message?.includes("Rejected") || err?.code === "USER_REJECTED") {
        return { status: "rejected", error: err };
      }

      if (err?.message?.includes("Not connected") || !userAddress) {
        return { status: "not_connected", error: err };
      }

      return { status: "error", error: err };
    }
  };

  const payWithTon = async (
    params: TonPayParams
  ): Promise<TonPaymentResponse> => {
    if (inProgressRef.current) {
      console.warn("‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è");
      return { status: "error", error: "Payment already in progress" };
    }

    inProgressRef.current = true;
    setIsProcessing(true);

    try {
      console.log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã TON");

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      console.log("–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ");
      console.log("userAddress", userAddress);
      console.log("!tonConnectUI.connected", !tonConnectUI.connected);
      if (!userAddress || !tonConnectUI.connected) {
        console.log("üîí –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ TON Connect");
        await tonConnectUI.openModal();

        // –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        await new Promise((resolve) => setTimeout(resolve, 3000));

        if (!userAddress) {
          return { status: "not_connected", error: "Wallet not connected" };
        }
      }

      // –ü–æ–ª—É—á–∞–µ–º –∫–æ—à–µ–ª–µ–∫ –º–µ—Ä—á–∞–Ω—Ç–∞
      const merchantWalletResult = await getTonWallet();

      if (typeof merchantWalletResult !== "string") {
        return merchantWalletResult;
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      if (!params.productId) {
        return { status: "error", error: "Product ID is required" };
      }

      console.log("üì¶ –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞:", params.productId);

      // –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å
      const invoiceResponse = await quranApi.post(
        "/api/v1/payments/ton/invoice",
        {
          priceId: params.productId,
          userWallet: userAddress,
        }
      );

      if (!invoiceResponse.data.data?.payload) {
        throw new Error("Invalid invoice response");
      }

      const { payload, payloadBOC } = invoiceResponse.data.data;
      const amount = params.amount.toString();

      console.log("üì¶ –î–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", {
        merchantAddress: merchantWalletResult,
        amount,
        productId: params.productId,
        userAddress,
        payload,
      });
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      console.log("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –±–ª–æ–∫—á–µ–π–Ω...");
      console.log("üîç Merchant wallet:", merchantWalletResult);
      console.log("üí∞ Amount in nanoTON:", amount);
      console.log("payloadBOC", payloadBOC);
      console.log("---------------------------------------------");
      console.log("–¥–∞–Ω–Ω—ã–µ –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ sendTransaction", {
        network: CHAIN.MAINNET,
        validUntil: Math.floor(Date.now() / 1000) + 300,
        messages: [
          {
            address: merchantWalletResult,
            amount,
            payload: payloadBOC,
          },
        ],
      });
      const result = await tonConnectUI.sendTransaction({
        network: CHAIN.MAINNET,
        validUntil: Math.floor(Date.now() / 1000) + 300,
        messages: [
          {
            address: merchantWalletResult,
            amount,
            payload: payloadBOC,
          },
        ],
      });

      console.log("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, BOC:", result.boc);

      // –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      return await waitForConfirmation(payload);
    } catch (err: any) {
      console.error("‚ùå TON payment error:", err);

      // –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫
      let status: TonPaymentResponse["status"] = "error";
      let errorMessage = err?.message || "Unknown error";

      if (err?.message?.includes("Rejected") || err?.code === "USER_REJECTED") {
        status = "rejected";
        errorMessage = "Transaction rejected by user";
      } else if (err?.message?.includes("Not connected") || !userAddress) {
        status = "not_connected";
        errorMessage = "Wallet not connected";
      } else if (err?.response?.status === 400) {
        status = "server_error";
        errorMessage = "Server configuration error";
      } else if (err?.message?.includes("Network")) {
        status = "error";
        errorMessage = "Network error, please check connection";
      }

      return {
        status,
        error: {
          message: errorMessage,
          details: err?.response?.data || err,
          code: err?.code,
        },
      };
    } finally {
      inProgressRef.current = false;
      setIsProcessing(false);
      setIsWaitingConfirmation(false);
    }
  };

  return {
    payWithTon,
    connectedAddress: userAddress,
    isConnected: !!userAddress && tonConnectUI.connected,
    isWaitingConfirmation,
    isProcessing,
  };
};
