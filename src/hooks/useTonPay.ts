import { useTonConnectUI, useTonAddress } from "@tonconnect/ui-react";
import { CHAIN } from "@tonconnect/ui-react";
import { quranApi } from "../api/api";

export interface TonPayParams {
  amount: number;
  type: "premium" | "requests";
  duration?: string;
  quantity?: number;
  productId?: string;
}

export interface TonPaymentResponse {
  status: "success" | "rejected" | "not_connected" | "server_error" | "error";
  error?: any;
  data?: any;
}

export const useTonPay = () => {
  const userAddress = useTonAddress();
  const [tonConnectUI] = useTonConnectUI();

  const waitForConfirmation = async (boc: string, orderId: string, maxAttempts = 20): Promise<TonPaymentResponse> => {
    for (let attempt = 1; attempt <= maxAttempts; attempt++) {
      try {
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxAttempts})`);
        
        const verificationResponse = await quranApi.post("/api/v1/payments/ton/verify", {
          boc,
          orderId,
          userWallet: userAddress,
          attempt
        });

        const { status, confirmations } = verificationResponse.data;

        if (status === "confirmed") {
          console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ —Å ${confirmations} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è–º–∏`);
          return {
            status: "success",
            data: verificationResponse.data
          };
        }

        if (status === "failed" || status === "rejected") {
          console.log("‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ —Å–µ—Ç—å—é");
          return {
            status: "error", 
            error: "Transaction failed in blockchain"
          };
        }

        // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å "pending" - –∂–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        if (attempt < maxAttempts) {
          await new Promise(resolve => setTimeout(resolve, 3000));
        }

      } catch (error) {
        console.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}):`, error);
        
        // –ù–∞ –æ—à–∏–±–∫–∞—Ö —Å–µ—Ç–∏ —Ç–æ–∂–µ –∂–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
        if (attempt < maxAttempts) {
          await new Promise(resolve => setTimeout(resolve, 3000));
        }
      }
    }

    console.log("‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è");
    return {
      status: "error",
      error: "Confirmation timeout"
    };
  };

  const payWithTon = async (params: TonPayParams): Promise<TonPaymentResponse> => {
    try {
      if (!userAddress) {
        await tonConnectUI.openModal();
        return { status: "not_connected" };
      }

      // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
      const invoiceResponse = await quranApi.post("/api/v1/payments/ton/invoice", {
        userWalletAddress: userAddress,
        amount: params.amount,
        type: params.type,
        productId: params.productId,
      });

      const { /*payload*/ boc, merchantWallet, orderId } = invoiceResponse.data;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      const result = await tonConnectUI.sendTransaction({
        network: CHAIN.TESTNET,
        validUntil: Math.floor(Date.now() / 1000) + 300,
        messages: [
          {
            address: merchantWallet,
            amount: (params.amount * 1e9).toString(),
            payload: boc,
          },
        ],
      });

      // üîÑ –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å polling
      return await waitForConfirmation(result.boc, orderId, 20);

    } catch (err: any) {
      console.error("TON payment error:", err);
      if (err?.message?.includes("Rejected")) {
        return { status: "rejected", error: err };
      }
      return { status: "error", error: err };
    }
  };

  return { payWithTon, connectedAddress: userAddress, isConnected: !!userAddress };
};