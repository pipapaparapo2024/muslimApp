import { create } from 'zustand';
import { persist } from 'zustand/middleware';
import { quranApi } from '../api/api';
import type { Language } from './useLanguages';

interface Translations {
  [key: string]: string;
}

interface ApiTranslationsResponse {
  en?: {
    translation: Translations;
  };
  ar?: {
    translation: Translations;
  };
}

interface TranslationsStore {
  translations: Translations | null;
  isLoading: boolean;
  error: string | null;
  loadedLanguage: Language | null;
  lastLoaded: number | null;
  
  setTranslations: (translations: Translations | null, language: Language) => void;
  setLoading: (isLoading: boolean) => void;
  setError: (error: string | null) => void;
  
  loadTranslations: (language: Language) => Promise<Translations | null>;
  getTranslation: (key: string) => string | undefined;
  hasTranslation: (key: string) => boolean;
  clearTranslations: () => void;
  shouldReloadTranslations: (language: Language) => boolean;
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –ø–æ —è–∑—ã–∫—É –∏–∑ –æ—Ç–≤–µ—Ç–∞ API
 */
const extractTranslationsByLanguage = (
  parsedTranslations: ApiTranslationsResponse, 
  language: Language
): Translations | null => {
  console.log("üåê –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è —è–∑—ã–∫–∞:", language);
  
  if (language === "en") {
    return parsedTranslations.en?.translation || null;
  } else if (language === "ar") {
    return parsedTranslations.ar?.translation || null;
  }
  
  console.warn("‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫:", language);
  return null;
};

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Å API
 */
const fetchTranslationsFromApi = async (): Promise<ApiTranslationsResponse | null> => {
  try {
    const response = await quranApi.get("/api/v1/settings/translations");
    const translationString = response?.data?.data?.translations;

    if (!translationString) {
      console.error("‚ö†Ô∏è –ü–µ—Ä–µ–≤–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ—Ç–≤–µ—Ç–µ API");
      return null;
    }

    const parsedTranslations: ApiTranslationsResponse = JSON.parse(translationString);
    console.log("üåê –ü–µ—Ä–µ–≤–æ–¥—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã —Å API");
    
    return parsedTranslations;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Å API:", error);
    throw error;
  }
};

export const useTranslationsStore = create<TranslationsStore>()(
  persist(
    (set, get) => ({
      translations: null,
      isLoading: false,
      error: null,
      loadedLanguage: null,
      lastLoaded: null,
      
      setTranslations: (translations, language) => set({ 
        translations, 
        loadedLanguage: language,
        lastLoaded: Date.now()
      }),
      
      setLoading: (isLoading) => set({ isLoading }),
      setError: (error) => set({ error }),
      
      shouldReloadTranslations: (language: Language) => {
        const { loadedLanguage, lastLoaded } = get();
        const CACHE_DURATION = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞
        
        return loadedLanguage !== language || 
               !lastLoaded || 
               Date.now() - lastLoaded > CACHE_DURATION;
      },
      
      loadTranslations: async (language: Language) => {
        const { shouldReloadTranslations, translations: currentTranslations } = get();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
        if (!shouldReloadTranslations(language) && currentTranslations) {
          console.log("üåê –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è —è–∑—ã–∫–∞:", language);
          return currentTranslations;
        }

        set({ isLoading: true, error: null });
        
        try {
          // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã —Å API
          const apiTranslations = await fetchTranslationsFromApi();
          
          if (!apiTranslations) {
            console.error("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã —Å API");
            return null;
          }

          // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –Ω—É–∂–Ω–æ–≥–æ —è–∑—ã–∫–∞
          const selectedTranslations = extractTranslationsByLanguage(apiTranslations, language);
          
          if (!selectedTranslations) {
            console.error("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è —è–∑—ã–∫–∞:", language);
            return null;
          }

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
          set({ 
            translations: selectedTranslations,
            loadedLanguage: language,
            lastLoaded: Date.now()
          });
          
          console.log("‚úÖ –ü–µ—Ä–µ–≤–æ–¥—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è —è–∑—ã–∫–∞:", language);
          return selectedTranslations;
          
        } catch (error) {
          const errorMessage = error instanceof Error ? error.message : 'Unknown error';
          console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤:", error);
          set({ error: errorMessage });
          return null;
        } finally {
          set({ isLoading: false });
        }
      },
      
      getTranslation: (key: string) => {
        const { translations } = get();
        return translations?.[key];
      },
      
      hasTranslation: (key: string) => {
        const { translations } = get();
        return translations?.[key] !== undefined;
      },
      
      clearTranslations: () => {
        set({ 
          translations: null,
          loadedLanguage: null,
          lastLoaded: null,
          error: null 
        });
      }
    }),
    {
      name: 'translations-storage',
      partialize: (state) => ({ 
        translations: state.translations,
        loadedLanguage: state.loadedLanguage,
        lastLoaded: state.lastLoaded
      })
    }
  )
);

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
export { extractTranslationsByLanguage, fetchTranslationsFromApi };