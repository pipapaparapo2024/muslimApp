import React, { useEffect, useRef, useState } from "react";
import styles from "./ShareStory.module.css";
import message from "../../../../assets/image/shareStory.png";
import backgroundImg from "../../../../assets/image/background.png";

import { PageWrapper } from "../../../../shared/PageWrapper";
import { LoadingSpinner } from "../../../../components/LoadingSpinner/LoadingSpinner";
import { useParams } from "react-router-dom";
import { useHistoryStore } from "../../../../hooks/useHistoryStore";
import { Upload } from "lucide-react";
import { t } from "i18next";
import { toBlob } from "html-to-image";

export const ShareStory: React.FC = () => {
  const [isLoaded, setIsLoaded] = useState(false);
  const [currentItem, setCurrentItem] = useState<any>(null);
  const { id } = useParams<{ id: string }>();
  const { getHistoryItem } = useHistoryStore();
  const screenshotRef = useRef<HTMLDivElement>(null);
  const [isCapturing, setIsCapturing] = useState(false);

  useEffect(() => {
    const loadData = async () => {
      if (!id) return;

      try {
        const preloadImage = (src: string): Promise<void> => {
          return new Promise((resolve) => {
            const img = new Image();
            img.src = src;
            img.onload = () => resolve();
            img.onerror = () => {
              console.warn(`Failed to load image: ${src}`);
              resolve();
            };
          });
        };

        const item = await getHistoryItem(id);
        await Promise.all([
          preloadImage(message),
          preloadImage(backgroundImg)
        ]);

        setCurrentItem(item);
        setIsLoaded(true);
      } catch (error) {
        console.error("Error loading data:", error);
        setIsLoaded(true);
      }
    };

    loadData();
  }, [id, getHistoryItem]);

  const handleCapture = async () => {
    if (!screenshotRef.current || !currentItem) {
      console.error("‚ùå screenshotRef.current –∏–ª–∏ currentItem is null");
      alert("–≠–ª–µ–º–µ–Ω—Ç –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return;
    }

    setIsCapturing(true);

    try {
      console.log("üì∏ [handleCapture] –ù–∞—á–∏–Ω–∞–µ–º –∑–∞—Ö–≤–∞—Ç...");

      const originalElement = screenshotRef.current;

      // 1. –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞
      const container = document.createElement("div");
      container.style.position = "fixed";
      container.style.left = "-9999px";
      container.style.top = "0";
      container.style.width = "390px";
      container.style.backgroundColor = "#ffffff";
      container.style.fontFamily = "Arial, sans-serif"; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —à—Ä–∏—Ñ—Ç
      container.style.boxSizing = "border-box";
      container.style.borderRadius = "12px";
      container.style.boxShadow = "0 2px 10px rgba(0,0,0,0.1)";
      container.style.overflow = "hidden";

      // 2. –ì–ª—É–±–æ–∫–æ–µ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      const clone = originalElement.cloneNode(true) as HTMLElement;
      
      // 3. –£–¥–∞–ª—è–µ–º –≤—Å–µ –≤–Ω–µ—à–Ω–∏–µ —Å—Ç–∏–ª–∏ –∏ —à—Ä–∏—Ñ—Ç—ã –∏–∑ –∫–ª–æ–Ω–∞
      const links = clone.querySelectorAll('link[rel="stylesheet"]');
      links.forEach(link => link.remove());
      
      const stylesheets = clone.querySelectorAll('style');
      stylesheets.forEach(style => {
        if (style.innerHTML.includes('@import') || style.innerHTML.includes('googleapis')) {
          style.remove();
        }
      });

      // 4. –£–±–∏—Ä–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º inline —Å—Ç–∏–ª–∏
      const images = clone.querySelectorAll('img');
      images.forEach((img, index) => {
        img.style.position = "relative";
        img.style.top = "auto";
        img.style.left = "auto";
        img.style.zIndex = (index + 1).toString();
        img.style.maxWidth = "100%";
        img.style.height = "auto";
      });

      // 5. –ü—Ä–∏–º–µ–Ω—è–µ–º inline —Å—Ç–∏–ª–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      const textElements = clone.querySelectorAll('.nickName, .text');
      textElements.forEach(el => {
        const element = el as HTMLElement;
        element.style.fontFamily = "Arial, sans-serif";
        element.style.color = "#2c3e50";
        element.style.margin = "0";
        element.style.padding = "0";
      });

      // 6. –°—Ç–∏–ª–∏ –¥–ª—è –±–ª–æ–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
      const messageBlocks = clone.querySelectorAll('.blockMessageUser, .blockMessageBot');
      messageBlocks.forEach(block => {
        const element = block as HTMLElement;
        element.style.background = "rgba(255, 255, 255, 0.95)";
        element.style.borderRadius = "12px";
        element.style.padding = "12px 16px";
        element.style.margin = "8px 0";
        element.style.backdropFilter = "blur(10px)";
      });

      // 7. –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã
      await new Promise<void>((resolve) => {
        const images = clone.querySelectorAll("img");
        let loadedCount = 0;
        
        if (images.length === 0) {
          resolve();
          return;
        }

        images.forEach((img) => {
          if (img.complete && img.naturalHeight > 0) {
            loadedCount++;
          } else {
            img.onload = () => {
              loadedCount++;
              if (loadedCount === images.length) resolve();
            };
            img.onerror = () => {
              loadedCount++;
              if (loadedCount === images.length) resolve();
            };
          }
        });

        if (loadedCount === images.length) resolve();
      });

      container.appendChild(clone);
      document.body.appendChild(container);

      // 8. –ñ–¥—ë–º –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
      await new Promise((resolve) => setTimeout(resolve, 1000));

      // 9. –°–æ–∑–¥–∞—ë–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –≤–Ω–µ—à–Ω–∏–º–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏
      const blob = await toBlob(clone, {
        pixelRatio: 2,
        backgroundColor: "#ffffff",
        quality: 1.0,
        cacheBust: true,
        skipFonts: true, // –û—Ç–∫–ª—é—á–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —à—Ä–∏—Ñ—Ç–æ–≤
        skipAutoScale: false,
        imagePlaceholder: undefined,
        includeQueryParams: false,
        filter: (node) => {
          // –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
          if (node instanceof Element) {
            // –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏ —Å–∫—Ä—ã—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            if (node.tagName === 'BUTTON' || 
                node.getAttribute('data-exclude-from-screenshot') === 'true') {
              return false;
            }
          }
          return true;
        },
        style: {
          // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å—Ç–∏–ª–∏
          fontFamily: 'Arial, sans-serif !important',
          transform: 'none !important'
        }
      });

      document.body.removeChild(container);

      if (!blob) {
        throw new Error("Blob is null");
      }

      const url = URL.createObjectURL(blob);
      
      // 10. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
      await shareToTelegramStory(url);
      
    } catch (error: any) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞:", error);
      alert(`–û—à–∏–±–∫–∞: ${t("exportFailed")}`);
    } finally {
      setIsCapturing(false);
    }
  };

  const shareToTelegramStory = async (url: string): Promise<void> => {
    if (!url) return;

    try {
      const tg = (window as any).Telegram;
      if (tg?.WebApp?.shareStory) {
        await tg.WebApp.shareStory(url, {
          widget: {
            url: "https://t.me/QiblaGuidebot",
            name: "@QiblaGuidebot",
          },
        });
      } else {
        // Fallback - –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ
        window.open(url, "_blank");
      }
    } catch (error) {
      console.error("Share story failed:", error);
      window.open(url, "_blank");
    }
  };

  if (!isLoaded) {
    return (
      <PageWrapper showBackButton={true}>
        <LoadingSpinner />
      </PageWrapper>
    );
  }

  if (!currentItem) {
    return (
      <PageWrapper showBackButton={true}>
        <div>{t("requestNotFound")}</div>
      </PageWrapper>
    );
  }

  return (
    <PageWrapper showBackButton={true} styleHave={false} navigateTo="/qna">
      <div className={styles.container}>
        {/* –û–±–µ—Ä—Ç–æ—á–Ω—ã–π div –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Å inline —Å—Ç–∏–ª—è–º–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ */}
        <div 
          ref={screenshotRef} 
          className={styles.contentWrapper}
          style={{
            fontFamily: 'Arial, sans-serif',
            maxWidth: '390px',
            width: '100%',
            height: '100%',
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            position: 'relative'
          }}
        >
          {/* –§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ */}
          <img
            src={backgroundImg}
            alt="Background"
            className={styles.backgroundImage}
            style={{
              position: 'absolute',
              top: '0',
              left: '0',
              width: '100%',
              height: '100%',
              objectFit: 'cover',
              zIndex: '1'
            }}
          />
          
          {/* –û—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è */}
          <img
            src={message}
            className={styles.messageImage}
            alt="Message background"
            style={{
              maxHeight: '570px',
              maxWidth: '100%',
              height: 'auto',
              width: 'auto',
              margin: '0 auto',
              objectFit: 'contain',
              paddingTop: '48px',
              position: 'relative',
              zIndex: '2'
            }}
          />
          
          {/* –ë–ª–æ–∫–∏ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ */}
          <div 
            className={styles.blockMessages}
            style={{
              position: 'absolute',
              left: '50%',
              transform: 'translateX(-50%)',
              bottom: '20px',
              padding: '16px',
              zIndex: '3',
              display: 'flex',
              flexDirection: 'column',
              gap: '8px',
              width: '100%',
              maxWidth: '390px',
              boxSizing: 'border-box'
            }}
          >
            <div 
              className={styles.blockMessageUser}
              style={{
                borderRadius: '12px 12px 0 12px',
                maxWidth: '280px',
                background: 'rgba(255, 255, 255, 0.95)',
                padding: '8px 16px',
                alignSelf: 'flex-end',
                marginLeft: 'auto',
                backdropFilter: 'blur(10px)'
              }}
            >
              <div 
                className={styles.nickName}
                style={{
                  color: '#2c3e50',
                  fontWeight: '400',
                  fontSize: '14px',
                  fontFamily: 'Arial, sans-serif'
                }}
              >
                {t("you")}
              </div>
              <div 
                className={styles.text}
                style={{
                  color: '#2c3e50',
                  lineHeight: '1.5',
                  fontFamily: 'Arial, sans-serif'
                }}
              >
                {currentItem.question}
              </div>
            </div>
            <div 
              className={styles.blockMessageBot}
              style={{
                background: 'rgba(255, 255, 255, 0.95)',
                maxWidth: '280px',
                borderRadius: '12px 12px 12px 0',
                padding: '8px 16px',
                alignSelf: 'flex-start',
                marginRight: 'auto',
                backdropFilter: 'blur(10px)'
              }}
            >
              <div 
                className={styles.nickName}
                style={{
                  color: '#2c3e50',
                  fontWeight: '400',
                  fontSize: '14px',
                  fontFamily: 'Arial, sans-serif'
                }}
              >
                @QiblaGuidebot
              </div>
              <div 
                className={styles.text}
                style={{
                  color: '#2c3e50',
                  lineHeight: '1.5',
                  fontFamily: 'Arial, sans-serif'
                }}
              >
                {currentItem.answer}
              </div>
            </div>
          </div>
        </div>
        
        {/* –ö–Ω–æ–ø–∫–∞ share –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –í–ù–ï —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ */}
        <div className={styles.blockButton}>
          <button
            type="button"
            onClick={handleCapture}
            disabled={isCapturing}
            className={`${styles.shareButton} ${
              isCapturing ? styles.shareButtonDisabled : ""
            }`}
            data-exclude-from-screenshot="true"
          >
            <Upload /> {isCapturing ? t("loading") : t("share")}
          </button>
        </div>
      </div>
    </PageWrapper>
  );
};