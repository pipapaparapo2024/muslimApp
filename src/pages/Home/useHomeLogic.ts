import { useEffect, useRef, useState, useCallback } from "react";
import { useNavigate } from "react-router-dom";
import { useUserParametersStore } from "../../hooks/useUserParametrsStore";
import { useGeoStore } from "../../hooks/useGeoStore";

// –ö–ª—é—á–∏ –¥–ª—è localStorage
const SENSOR_PERMISSION_STATUS = "sensorPermissionStatus";
const IP_DATA_CACHE = "ipDataCache";
export const useHomeLogic = () => {
  const navigate = useNavigate();
  const { settingsSent, sendUserSettings } = useUserParametersStore();

  // –ì–µ–æ–¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–æ—Ä–∞
  const {
    langcode,
    coords,
    city,
    country,
    timeZone,
    isLoading,
    error,
    fetchFromIpApi,
    setError,
    setLoading,
  } = useGeoStore();

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞—Ç—á–∏–∫–∞–º
  const [sensorPermission, setSensorPermission] = useState<string>(() => {
    const saved = localStorage.getItem(SENSOR_PERMISSION_STATUS);
    return saved === "granted" ? "granted" : "prompt";
  });
  const [isRefreshing, setIsRefreshing] = useState(false);

  const ipDataFetched = useRef(false);
  const settingsSentRef = useRef(settingsSent);
  const lastSettingsSendRef = useRef(0); // ‚Üê Ref –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏

  // –û–±–Ω–æ–≤–ª—è–µ–º ref –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ settingsSent
  useEffect(() => {
    settingsSentRef.current = settingsSent;
  }, [settingsSent, isRefreshing]);

  // === –û–¢–ü–†–ê–í–ö–ê –ù–ê–°–¢–†–û–ï–ö –ú–ï–°–¢–û–ü–û–õ–û–ñ–ï–ù–ò–Ø ===
  const sendLocationSettings = useCallback(async () => {
    // üî• –ó–ê–©–ò–¢–ê –û–¢ –ß–ê–°–¢–´–• –ó–ê–ü–†–û–°–û–í - –Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 10 —Å–µ–∫—É–Ω–¥
    const now = Date.now();
    if (now - lastSettingsSendRef.current < 10000) {
      console.log("–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º");
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å
    if (!city || !country || !timeZone) {
      console.log("–ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏");
      return;
    }

    console.log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:", {
      city,
      country,
      langcode,
      timeZone,
    });

    try {
      await sendUserSettings({
        city,
        countryName: country,
        langcode,
        timeZone,
      });
      console.log("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã");
      lastSettingsSendRef.current = now; // ‚Üê –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫:", error);
    }
  }, [city, country, timeZone, langcode, sendUserSettings]);

  useEffect(() => {
    if (city && country && timeZone) {
      sendLocationSettings();
    }
  }, [city, country, timeZone, sendLocationSettings]);

  // === –û–ë–ù–û–í–õ–ï–ù–ò–ï –ì–ï–û–õ–û–ö–ê–¶–ò–ò ===
  const handleRefreshLocationData = useCallback(async () => {
    setIsRefreshing(true);
    setLoading(true);

    // –û—á–∏—â–∞–µ–º –∫—ç—à –ü–ï–†–ï–î –∑–∞–ø—Ä–æ—Å–æ–º
    localStorage.removeItem(IP_DATA_CACHE);
    ipDataFetched.current = false;

    try {
      await fetchFromIpApi();
      ipDataFetched.current = true;

      // ‚úÖ –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤—è—Ç—Å—è –±–ª–∞–≥–æ–¥–∞—Ä—è useEffect –≤—ã—à–µ
      // –∫–æ—Ç–æ—Ä—ã–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è city, country, timeZone
    } catch (error) {
      console.error("Failed to refresh location data:", error);
      setError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è");
    } finally {
      setIsRefreshing(false);
      setLoading(false);
    }
  }, [fetchFromIpApi, setError, setLoading]); // ‚úÖ –£–±—Ä–∞–ª–∏ isRefreshing –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

  // === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ì–ï–û–î–ê–ù–ù–´–• ===
  useEffect(() => {
    const initializeLocation = async () => {
      // –í—Å–µ–≥–¥–∞ –¥–µ–ª–∞–µ–º —Å–≤–µ–∂–∏–π –∑–∞–ø—Ä–æ—Å –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      if (!ipDataFetched.current) {
        try {
          await fetchFromIpApi();
          ipDataFetched.current = true;
        } catch (_) {
          setError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ");
        }
      }
    };

    initializeLocation();
  }, [fetchFromIpApi, setError]);

  // === –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ê –ö –î–ê–¢–ß–ò–ö–ê–ú –ü–†–ò –ó–ê–ì–†–£–ó–ö–ï ===
  useEffect(() => {
    let isMounted = true;

    const checkSensorAccess = () => {
      if (sensorPermission === "granted") return;

      const saved = localStorage.getItem(SENSOR_PERMISSION_STATUS);

      if (saved === "granted") {
        const handler = (event: DeviceOrientationEvent) => {
          if (
            isMounted &&
            (event.alpha !== null ||
              event.beta !== null ||
              event.gamma !== null)
          ) {
            window.removeEventListener("deviceorientation", handler);
            setSensorPermission("granted");
          }
        };

        window.addEventListener("deviceorientation", handler, { once: true });

        const timeout = setTimeout(() => {
          window.removeEventListener("deviceorientation", handler);
          if (isMounted) {
            setSensorPermission("prompt");
          }
        }, 1000);

        return () => clearTimeout(timeout);
      } else {
        if (isMounted) {
          setSensorPermission("prompt");
        }
      }
    };

    checkSensorAccess();

    return () => {
      isMounted = false;
    };
  }, [sensorPermission]);

  // === –ó–ê–ü–†–û–° –î–û–°–¢–£–ü–ê –ö –î–ê–¢–ß–ò–ö–ê–ú ===
  const requestSensorPermission = useCallback(async () => {
    try {
      if (
        typeof DeviceOrientationEvent !== "undefined" &&
        (DeviceOrientationEvent as any).requestPermission
      ) {
        const result = await (
          DeviceOrientationEvent as any
        ).requestPermission();
        if (result === "granted") {
          localStorage.setItem(SENSOR_PERMISSION_STATUS, "granted");
          setSensorPermission("granted");
        } else {
          localStorage.setItem(SENSOR_PERMISSION_STATUS, "denied");
          setSensorPermission("denied");
        }
      } else {
        window.addEventListener("deviceorientation", () => {}, { once: true });
        localStorage.setItem(SENSOR_PERMISSION_STATUS, "granted");
        setSensorPermission("granted");
      }
    } catch (err) {
      console.error("Sensor permission error:", err);
      localStorage.setItem(SENSOR_PERMISSION_STATUS, "denied");
      setSensorPermission("denied");
    }
  }, []);

  // Telegram WebApp
  useEffect(() => {
    const tg = window.Telegram?.WebApp;
    if (tg) {
      tg.ready();
      tg.MainButton.hide();
      tg.BackButton.hide();
      tg.enableClosingConfirmation();
    }
  }, []);

  // –ù–∞–≤–∏–≥–∞—Ü–∏—è
  const handleCompassClick = useCallback(() => {
    navigate("/qibla", { state: { activeTab: "compass" } });
  }, [navigate]);

  const handleMapClick = useCallback(() => {
    navigate("/qibla", { state: { activeTab: "map" } });
  }, [navigate]);

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏—è
    sensorPermission,
    isRefreshing,
    coords,
    city,
    country,
    timeZone,
    isLoading,
    error,

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    requestSensorPermission,
    handleRefreshLocationData,
    handleCompassClick,
    handleMapClick,
  };
};
