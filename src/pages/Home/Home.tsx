// import React, { useState, useCallback } from "react";
// import styles from "./Home.module.css";
// import { PageWrapper } from "../../shared/PageWrapper";
// import { MenuBlocks } from "./MenuBlocks/MenuBlocks";
// import { PrayerTimes } from "./PrayerTimes/PrayerTimes";
// import { QiblaCompass } from "./QiblaCompass/QiblaCompass";
// import { useGeoStore } from "../../hooks/useGeoStore";
// import { QiblaMap } from "./QiblaCompass/QiblaMap";
// import { Header } from "../../components/header/Header";
// import { t } from "i18next";
// import { useNavigate } from "react-router-dom";
// import { LoadingSpinner } from "../../components/LoadingSpinner/LoadingSpinner";

// // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ iOS
// const isIOS = () => {
//   const isIOSDevice = /iPad|iPhone|iPod/.test(navigator.userAgent) && !(window as any).MSStream;
//   console.log("üì± iOS device detection:", isIOSDevice, "UserAgent:", navigator.userAgent);
//   return isIOSDevice;
// };

// // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
// const requiresPermission = () => {
//   const hasRequestPermission = isIOS() &&
//     typeof DeviceOrientationEvent !== "undefined" &&
//     typeof (DeviceOrientationEvent as any).requestPermission === "function";
  
//   console.log("üîç Requires permission check:", {
//     isIOS: isIOS(),
//     hasDeviceOrientation: typeof DeviceOrientationEvent !== "undefined",
//     hasRequestPermission: typeof (DeviceOrientationEvent as any).requestPermission === "function",
//     result: hasRequestPermission
//   });
  
//   return hasRequestPermission;
// };

// export const Home: React.FC = () => {
//   const navigate = useNavigate();
//   const { isLoading, error } = useGeoStore();

//   const [sensorPermission, setSensorPermission] = useState<string>("prompt");
//   const [isRequestingPermission, setIsRequestingPermission] = useState(false);

//   console.log("üè† Home component render - Sensor permission:", sensorPermission, "Requesting:", isRequestingPermission);

//   // –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
//   const requestSensorPermission = useCallback(async () => {
//     console.log("üîÑ Starting sensor permission request...");
//     setIsRequestingPermission(true);
    
//     try {
//       if (requiresPermission()) {
//         console.log("üì± iOS device detected, requesting permission...");
//         // iOS - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
//         const result = await (
//           DeviceOrientationEvent as any
//         ).requestPermission();
//         console.log("‚úÖ iOS permission request result:", result);
//         setSensorPermission(result);
//       } else {
//         console.log("ü§ñ Non-iOS device, permission granted automatically");
//         // Android –∏ –¥—Ä—É–≥–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ - —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
//         setSensorPermission("granted");
//       }
//     } catch (err) {
//       console.error("‚ùå Sensor permission error:", err);
//       setSensorPermission("denied");
//     } finally {
//       console.log("üèÅ Permission request finished");
//       setIsRequestingPermission(false);
//     }
//   }, []);

//   // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –Ω–∞ –∫–æ–º–ø–∞—Å
//   const handleCompassClick = useCallback(async () => {
//     console.log("üß≠ Compass clicked, current permission:", sensorPermission);
    
//     if (sensorPermission === "denied") {
//       console.warn("üö´ Permission denied, showing alert");
//       alert(t("sensorPermissionDeniedMessage"));
//       return;
//     }

//     if (sensorPermission === "prompt" && requiresPermission()) {
//       console.log("üì± iOS device needs permission, requesting...");
//       // iOS - –Ω—É–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
//       setIsRequestingPermission(true);
//       try {
//         const result = await (
//           DeviceOrientationEvent as any
//         ).requestPermission();
//         console.log("‚úÖ Inline permission request result:", result);
//         setSensorPermission(result);

//         if (result === "granted") {
//           console.log("üéâ Permission granted, navigating to qibla compass");
//           navigate("/qibla", { state: { activeTab: "compass" } });
//         } else {
//           console.warn("‚ùå Permission not granted, showing alert");
//           alert(t("sensorPermissionRequired"));
//         }
//       } catch (err) {
//         console.error("‚ùå Inline permission request error:", err);
//         setSensorPermission("denied");
//         alert(t("sensorPermissionError"));
//       } finally {
//         setIsRequestingPermission(false);
//       }
//     } else {
//       console.log("‚û°Ô∏è Permission already granted or not required, navigating to qibla compass");
//       // –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å –∏–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
//       navigate("/qibla", { state: { activeTab: "compass" } });
//     }
//   }, [sensorPermission, navigate]);

//   const handleMapClick = useCallback(() => {
//     console.log("üó∫Ô∏è Map clicked, navigating to qibla map");
//     navigate("/qibla", { state: { activeTab: "map" } });
//   }, [navigate]);

//   // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ iOS (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
//   const openSettings = useCallback(() => {
//     if (isIOS()) {
//       // –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Safari
//       window.open('app-settings:');
//     }
//   }, []);

//   const showPermissionButton = requiresPermission() && 
//                              sensorPermission !== "granted" && 
//                              sensorPermission !== "denied";
  
//   console.log("üëÄ Show permission button:", showPermissionButton);

//   return (
//     <PageWrapper>
//       <Header />

//       {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞—Ç—á–∏–∫–∞–º */}
//       {showPermissionButton && (
//         <button
//           className={styles.allowSensorButton}
//           onClick={requestSensorPermission}
//           disabled={isRequestingPermission}
//         >
//           {isRequestingPermission ? t("requesting") : t("allowSensors")}
//         </button>
//       )}

//       {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π */}
//       {sensorPermission === "denied" && (
//         <div className={styles.permissionDeniedMessage}>
//           <p>{t("sensorPermissionDeniedMessage")}</p>
//           <p style={{ fontSize: '14px', marginTop: '8px', color: '#666' }}>
//             {t("sensorPermissionInstructions")}
//           </p>
//           <button 
//             onClick={openSettings}
//             className={styles.settingsButton}
//             style={{
//               marginTop: '12px',
//               padding: '8px 16px',
//               backgroundColor: '#007AFF',
//               color: 'white',
//               border: 'none',
//               borderRadius: '8px',
//               cursor: 'pointer'
//             }}
//           >
//             {t("openSettings")}
//           </button>
//         </div>
//       )}

//       <div className={styles.homeRoot}>
//         {isLoading && (
//           <div className={styles.loadingContainer}>
//             <LoadingSpinner />
//           </div>
//         )}

//         {error && <div className={styles.errorContainer}>{error}</div>}

//         {!isLoading && !error && (
//           <>
//             <div className={styles.prayerTimesQiblaContainer}>
//               <PrayerTimes />

//               <div className={styles.qiblaBlock}>
//                 <div className={styles.titleFaceKaaba}>{t("faceTheKaaba")}</div>
//                 <div className={styles.diskFaceKaaba}>
//                   {t("useMapForSalah")}
//                 </div>

//                 <div className={styles.qiblaBlockRow}>
//                   <div onClick={handleMapClick} className={styles.mapContainer}>
//                     <QiblaMap onMapClick={handleMapClick} />
//                   </div>

//                   <div
//                     onClick={handleCompassClick}
//                     className={styles.compassContainer}
//                   >
//                     <QiblaCompass
//                       permissionGranted={sensorPermission === "granted"}
//                     />
//                   </div>
//                 </div>
//               </div>
//               <div className={styles.locationMay}>{t("locationMay")}</div>
//             </div>

//             <MenuBlocks />
//           </>
//         )}
//       </div>
//     </PageWrapper>
//   );
// };
// Home.tsx (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
import React, { useState, useEffect, useRef, useCallback } from 'react';
import './Home.css';

const Home: React.FC = () => {
  const [permissionGranted, setPermissionGranted] = useState<boolean>(false);
  const [compassHeading, setCompassHeading] = useState<number>(0);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string>('');
  
  const permissionRef = useRef<boolean>(false);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É DeviceOrientation API
  const isDeviceOrientationSupported = useCallback((): boolean => {
    return 'DeviceOrientationEvent' in window && 
           typeof (DeviceOrientationEvent as any).requestPermission === 'function';
  }, []);

  // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
  const requestOrientationPermission = async (): Promise<void> => {
    setIsLoading(true);
    setError('');

    try {
      if (!isDeviceOrientationSupported()) {
        setError('DeviceOrientation API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º');
        setIsLoading(false);
        return;
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º any –¥–ª—è –æ–±—Ö–æ–¥–∞ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
      const DeviceOrientationEventWithPermission = DeviceOrientationEvent as any;
      const permission = await DeviceOrientationEventWithPermission.requestPermission();
      
      if (permission === 'granted') {
        setPermissionGranted(true);
        permissionRef.current = true;
        startCompass();
      } else {
        setError('–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ');
        setPermissionGranted(false);
      }
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: ' + (err as Error).message);
      setPermissionGranted(false);
    } finally {
      setIsLoading(false);
    }
  };

  // –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–∞—Å–∞
  const startCompass = useCallback((): (() => void) => {
    if (!permissionRef.current) return () => {};

    const handleOrientation = (event: DeviceOrientationEvent): void => {
      if (event.alpha !== null) {
        setCompassHeading(Math.round(event.alpha));
      }
    };

    window.addEventListener('deviceorientation', handleOrientation as EventListener);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—á–∏—Å—Ç–∫–∏
    return () => {
      window.removeEventListener('deviceorientation', handleOrientation as EventListener);
    };
  }, []);

  useEffect(() => {
    let cleanup: (() => void) | undefined;
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–∞—Å –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å
    if (permissionGranted) {
      cleanup = startCompass();
    }

    return () => {
      if (cleanup) {
        cleanup();
      }
    };
  }, [permissionGranted, startCompass]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≥—Ä–∞–¥—É—Å–æ–≤ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
  const getDirection = useCallback((degrees: number): string => {
    const directions = ['N', 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW'];
    const index = Math.round(degrees / 45) % 8;
    return directions[index];
  }, []);

  return (
    <div className="home">
      <div className="container">
        <h1>–ö–æ–º–ø–∞—Å TWA</h1>
        
        {!permissionGranted ? (
          <div className="permission-section">
            <p>–î–ª—è —Ä–∞–±–æ—Ç—ã –∫–æ–º–ø–∞—Å–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</p>
            <button 
              onClick={requestOrientationPermission}
              disabled={isLoading}
              className="permission-button"
            >
              {isLoading ? '–ó–∞–ø—Ä–æ—Å...' : '–†–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏'}
            </button>
          </div>
        ) : (
          <div className="compass-section">
            <div className="compass">
              <div 
                className="compass-needle"
                style={{ transform: `rotate(${compassHeading}deg)` }}
              >
                <div className="needle"></div>
              </div>
              <div className="compass-circle"></div>
            </div>
            
            <div className="compass-info">
              <p>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {getDirection(compassHeading)}</p>
              <p>–ì—Ä–∞–¥—É—Å—ã: {compassHeading}¬∞</p>
            </div>
          </div>
        )}

        {error && (
          <div className="error">
            <p>{error}</p>
          </div>
        )}

        {!isDeviceOrientationSupported() && (
          <div className="warning">
            <p>–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ API –¥–ª—è —Ä–∞–±–æ—Ç—ã –∫–æ–º–ø–∞—Å–∞</p>
          </div>
        )}
      </div>
    </div>
  );
};

export default Home;