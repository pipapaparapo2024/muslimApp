import React, { useState, useCallback, useEffect } from "react";
import styles from "./Home.module.css";
import { PageWrapper } from "../../shared/PageWrapper";
import { MenuBlocks } from "./MenuBlocks/MenuBlocks";
import { PrayerTimes } from "./PrayerTimes/PrayerTimes";
import { QiblaCompass } from "./QiblaCompass/QiblaCompass";
import { useGeoStore } from "../../hooks/useGeoStore";
import { QiblaMap } from "./QiblaCompass/QiblaMap";
import { Header } from "../../components/header/Header";
import { t } from "i18next";
import { useNavigate } from "react-router-dom";
import { LoadingSpinner } from "../../components/LoadingSpinner/LoadingSpinner";

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ iOS
const isIOS = () => {
  const isIOSDevice =
    /iPad|iPhone|iPod/.test(navigator.userAgent) && !(window as any).MSStream;
  console.log(
    "üì± iOS device detection:",
    isIOSDevice,
    "UserAgent:",
    navigator.userAgent
  );
  return isIOSDevice;
};

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
const requiresPermission = () => {
  const isIOSDevice = isIOS();
  const hasRequestPermission = 
    isIOSDevice &&
    typeof DeviceOrientationEvent !== "undefined" &&
    typeof (DeviceOrientationEvent as any).requestPermission === "function";

  console.log("üîç Requires permission check:", {
    isIOS: isIOSDevice,
    hasRequestPermission,
  });

  return hasRequestPermission;
};

export const Home: React.FC = () => {
  const navigate = useNavigate();
  const { isLoading, error } = useGeoStore();

  const [sensorPermission, setSensorPermission] = useState<string>("prompt");
  const [isRequestingPermission, setIsRequestingPermission] = useState(false);
  const [showPermissionRequest, setShowPermissionRequest] = useState(false);

  console.log(
    "üè† Home component render - Sensor permission:",
    sensorPermission,
    "Requesting:",
    isRequestingPermission
  );

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
  useEffect(() => {
    // –î–ª—è –Ω–µ-iOS —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
    if (!requiresPermission()) {
      setSensorPermission("granted");
    }
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è - –î–û–õ–ñ–ù–ê –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–ª–∏–∫–∞
  const requestSensorPermissionDirect = useCallback(async () => {
    console.log("üîÑ Direct permission request called");
    
    if (!requiresPermission()) {
      console.log("ü§ñ Non-iOS device, permission granted automatically");
      setSensorPermission("granted");
      return "granted";
    }

    setIsRequestingPermission(true);
    setShowPermissionRequest(false);

    try {
      console.log("üì± iOS - calling requestPermission directly...");
      
      // –í–ê–ñ–ù–û: –≤—ã–∑—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ setTimeout –∏ –¥—Ä—É–≥–∏—Ö –æ–±–µ—Ä—Ç–æ–∫
      const result = await (DeviceOrientationEvent as any).requestPermission();
      
      console.log("‚úÖ iOS permission request result:", result);
      setSensorPermission(result);
      
      if (result === "granted") {
        console.log("üéâ Permission granted successfully!");
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∫–æ–º–ø–∞—Å—É –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        setTimeout(() => {
          navigate("/qibla", { state: { activeTab: "compass" } });
        }, 100);
      }
      
      return result;
    } catch (err) {
      console.error("‚ùå Sensor permission error:", err);
      setSensorPermission("denied");
      return "denied";
    } finally {
      setIsRequestingPermission(false);
    }
  }, [navigate]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –Ω–∞ –∫–æ–º–ø–∞—Å
  const handleCompassClick = useCallback(async () => {
    console.log("üß≠ Compass clicked, current permission:", sensorPermission);

    if (sensorPermission === "denied") {
      alert(t("sensorPermissionDeniedMessage"));
      return;
    }

    if (sensorPermission === "granted") {
      navigate("/qibla", { state: { activeTab: "compass" } });
      return;
    }

    // –î–ª—è iOS –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    if (requiresPermission()) {
      setShowPermissionRequest(true);
    } else {
      // –î–ª—è –¥—Ä—É–≥–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º
      navigate("/qibla", { state: { activeTab: "compass" } });
    }
  }, [sensorPermission, navigate]);

  const handleMapClick = useCallback(() => {
    navigate("/qibla", { state: { activeTab: "map" } });
  }, [navigate]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ iOS
  const openSettings = useCallback(() => {
    if (isIOS()) {
      try {
        // –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Safari
        window.location.href = 'app-settings:';
      } catch (err) {
        console.error("Failed to open settings:", err);
        alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Safari –≤—Ä—É—á–Ω—É—é –∏ —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –¥–∞—Ç—á–∏–∫–∞–º –¥–≤–∏–∂–µ–Ω–∏—è");
      }
    }
  }, []);

  const showPermissionButton = requiresPermission() && sensorPermission === "prompt";
  const showPermissionRequestModal = showPermissionRequest && sensorPermission === "prompt";

  return (
    <PageWrapper>
      <Header />

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è */}
      {showPermissionRequestModal && (
        <div className={styles.permissionModal}>
          <div className={styles.modalContent}>
            <h3>{t("sensorPermissionRequired")}</h3>
            <p>{t("sensorPermissionMessage")}</p>
            <div className={styles.modalButtons}>
              <button
                className={styles.cancelButton}
                onClick={() => setShowPermissionRequest(false)}
              >
                {t("cancel")}
              </button>
              <button
                className={styles.allowButton}
                onClick={requestSensorPermissionDirect}
                disabled={isRequestingPermission}
              >
                {isRequestingPermission ? t("requesting") : t("allow")}
              </button>
            </div>
          </div>
        </div>
      )}

      {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞—Ç—á–∏–∫–∞–º */}
      {showPermissionButton && !showPermissionRequestModal && (
        <div className={styles.permissionSection}>
          <p>{t("sensorPermissionRequired")}</p>
          <button
            className={styles.allowSensorButton}
            onClick={() => setShowPermissionRequest(true)}
            disabled={isRequestingPermission}
          >
            {t("allowSensors")}
          </button>
        </div>
      )}

      {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ */}
      {sensorPermission === "denied" && (
        <div className={styles.permissionDeniedMessage}>
          <p>{t("sensorPermissionDeniedMessage")}</p>
          <button
            onClick={openSettings}
            className={styles.settingsButton}
          >
            {t("openSettings")}
          </button>
        </div>
      )}

      <div className={styles.homeRoot}>
        {isLoading && (
          <div className={styles.loadingContainer}>
            <LoadingSpinner />
          </div>
        )}

        {error && <div className={styles.errorContainer}>{error}</div>}

        {!isLoading && !error && (
          <>
            <div className={styles.prayerTimesQiblaContainer}>
              <PrayerTimes />

              <div className={styles.qiblaBlock}>
                <div className={styles.titleFaceKaaba}>{t("faceTheKaaba")}</div>
                <div className={styles.diskFaceKaaba}>
                  {t("useMapForSalah")}
                </div>

                <div className={styles.qiblaBlockRow}>
                  <div onClick={handleMapClick} className={styles.mapContainer}>
                    <QiblaMap onMapClick={handleMapClick} />
                  </div>

                  <div
                    onClick={handleCompassClick}
                    className={styles.compassContainer}
                  >
                    <QiblaCompass
                      permissionGranted={sensorPermission === "granted"}
                    />
                  </div>
                </div>
              </div>
              <div className={styles.locationMay}>{t("locationMay")}</div>
            </div>

            <MenuBlocks />
          </>
        )}
      </div>
    </PageWrapper>
  );
};