import { useEffect, useState } from "react";
import WebApp from "@twa-dev/sdk";
import axios from "axios";
import { quranApi } from "./api";

interface AuthResponse {
  data: {
    accessToken: string;
    wasLogged: boolean;
  };
  status: string;
}

export const useTelegram = () => {
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [wasLogged, setWasLogged] = useState<boolean | null>(null);
  const [responseData, setResponseData] = useState<any>(null); // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞

  useEffect(() => {
    if ((window as any).__TELEGRAM_INIT_DONE__) return;
    (window as any).__TELEGRAM_INIT_DONE__ = true;

    WebApp.ready();
    WebApp.expand();

    const authenticate = async () => {
      try {
        console.log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é...");
        console.log("InitData:", WebApp.initData);

        const response = await quranApi.post<AuthResponse>(
          "/api/v1/user/auth/",
          {
            initData: WebApp.initData,
          }
        );

        console.log("‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:");
        console.log("üìä –°—Ç–∞—Ç—É—Å:", response.status);
        console.log("üì¶ –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:", response.data);
        console.log("üîê AccessToken:", response.data.data.accessToken);
        console.log("üë§ WasLogged:", response.data.data.wasLogged);
        console.log("üè∑Ô∏è Status:", response.data.status);
        console.log("InitData:", WebApp.initData);
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        setResponseData(response.data);

        const { accessToken, wasLogged } = response.data.data;

        localStorage.setItem("accessToken", accessToken);
        setWasLogged(wasLogged);

        if (accessToken) {
          quranApi.defaults.headers.common[
            "Authorization"
          ] = `Bearer ${accessToken}`;
          setIsAuthenticated(true);
        }

        WebApp.MainButton.setText("–ó–∞–∫—Ä—ã—Ç—å");
        WebApp.MainButton.onClick(() => WebApp.close());
        WebApp.MainButton.show();
      } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ:");

        if (axios.isAxiosError(err)) {
          console.error("üìä –°—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏:", err.response?.status);
          console.error("üì¶ –î–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:", err.response?.data);
          console.error("üìù –°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏:", err.message);
          console.error("üîß –ö–æ–¥ –æ—à–∏–±–∫–∏:", err.code);

          const errorMessage = err.response?.data?.message || err.message;
          setError(errorMessage);
          WebApp.showAlert(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${errorMessage}`);
        } else {
          console.error("üí• –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:", err);
          const errorMessage = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
          setError(errorMessage);
          WebApp.showAlert(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${errorMessage}`);
        }
      } finally {
        setIsLoading(false);
      }
    };

    authenticate();
  }, []);

  return {
    isAuthenticated,
    wasLogged,
    isLoading,
    error,
    webApp: WebApp,
    initData: WebApp.initData,
    initDataUnsafe: WebApp.initDataUnsafe,
    responseData, // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞
  };
};
