import axios from "axios";
import WebApp from "@twa-dev/sdk";

// === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API ===
export const quranApi = axios.create({
  baseURL: "https://islamapp.myfavouritegames.org",
  timeout: 10000,
});

// === –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ü–∏–∫–ª–∏—Ç—å refresh ===
let isRefreshing = false;

// === Request Interceptor ===
quranApi.interceptors.request.use((config) => {
  const token = localStorage.getItem("accessToken");
  if (token) config.headers.Authorization = `Bearer ${token}`;

  if (WebApp.initData) {
    config.headers["X-Telegram-Init-Data"] = WebApp.initData;
  }

  if (process.env.NODE_ENV === "development") {
    console.log("[API ‚Üí]", config.method?.toUpperCase(), config.url, config.params || "");
  }

  return config;
});

// === Response Interceptor ===
quranApi.interceptors.response.use(
  (response) => {
    if (process.env.NODE_ENV === "development") {
      console.log("[API ‚Üê]", response.status, response.config.url);
    }
    return response;
  },
  async (error) => {
    const originalRequest = error.config;

    // –ï—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ –Ω–µ –ø—Ä–æ–±–æ–≤–∞–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
    if (error.response?.status === 401 && !originalRequest._retry) {
      // –ï—Å–ª–∏ —É–∂–µ –∏–¥—ë—Ç –ø—Ä–æ—Ü–µ—Å—Å refresh ‚Äî –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –≤—Ç–æ—Ä–æ–π
      if (isRefreshing) {
        console.warn("‚è≥ Refresh in progress, skipping duplicate...");
        return Promise.reject(error);
      }

      originalRequest._retry = true;
      isRefreshing = true;

      try {
        console.log("üîÑ Refreshing token...");
        const refreshResponse = await axios.post(
          "https://islamapp.myfavouritegames.org/api/v1/user/auth/refresh"
        );

        const newToken = refreshResponse.data?.data?.accessToken;
        if (!newToken) throw new Error("Refresh failed: no accessToken in response");

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω
        localStorage.setItem("accessToken", newToken);
        quranApi.defaults.headers.common.Authorization = `Bearer ${newToken}`;
        originalRequest.headers.Authorization = `Bearer ${newToken}`;

        console.log("‚úÖ Token refreshed");
        isRefreshing = false;

        // –ü–æ–≤—Ç–æ—Ä—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        return quranApi(originalRequest);
      } catch (refreshError) {
        console.error("‚ùå Refresh token failed:", refreshError);
        isRefreshing = false;

        // –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã
        localStorage.removeItem("accessToken");
        localStorage.removeItem("refreshToken");

        // –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if (window.Telegram?.WebApp) {
          window.Telegram.WebApp.showAlert("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞.");
          setTimeout(() => window.Telegram.WebApp.close(), 1500);
        } else {
          window.location.href = "/login";
        }

        return Promise.reject(refreshError);
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ 500
    if (error.response?.status === 500) {
      window.Telegram?.WebApp?.showAlert?.("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ");
    }

    return Promise.reject(error);
  }
);
